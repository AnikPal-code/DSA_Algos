#include<iostream>
using namespace std;

class MaxHeap {
    int *arr;
    int size; // current size/no. of elements present at the moment.
    int total_size; // initialized size of the whole array.

    public:
    MaxHeap(int n) {
        arr = new int[n];
        size = 0;
        total_size = n;
    }

    void display() { // O(n) where n is total no. of nodes in the heap.
        if (size == 0) {
            cout << "Heap is empty!" << endl;
            return;
        }
        cout << "Heap elements: ";
        for(int i = 0; i < size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }

    void heapify(int index) { // O(log(n))
        int largest = index;
        int left = 2*index+1;
        int right = 2*index+2;

        // Largest will store the index of the element which is greater 
        // between parent, left child and right child.
        if (left < size && arr[left] > arr[largest]) {
            largest = left;
        }
        if (right < size && arr[right] > arr[largest]) {
            largest = right;
        }

        if (largest != index) {
            swap(arr[index], arr[largest]);
            heapify(largest);
        }
    }

    // insertion in the heap
    void insert(int value) { // O(n*log(n))
        // if heap size available or not
        if (size == total_size) {
            cout << "Heap Overflown" << endl;
            return;
        }
        arr[size] = value;  // Insert the value at the end of the heap
        int index = size;   // Store the current index of the inserted element
        size++;             // Increase the size

        // Percolate the inserted element up the heap to maintain max-heap property
        while(index > 0) {
            int parent = (index - 1) / 2;  // Calculate the parent index
            if (arr[index] > arr[parent]) { // Compare the inserted element with its parent
                swap(arr[index], arr[parent]);  // Swap if inserted element is larger
                index = parent;  // Move the index to the parent position
            } else {
                break;  // If the inserted element is not larger than its parent, break
            }
        }
        cout << value << " is inserted into the heap" << endl;
    }

    void Delete() { // O(log(n))
        if (size == 0) {
            cout << "Heap Underflown";
            return ;
        }
        cout << arr[0] << " to be deleted from the heap" << endl;
        arr[0] = arr[size-1]; // Replacing root node with last element in array.
        size--; // Decrementing value of size by 1.

        if (size == 0) {
            return ;
        }
        heapify(0); // taking root node to it's correct position after arr[0] = arr[size-1].
    }
};

int main() {
    MaxHeap H1(6);
    H1.insert(4);
    H1.insert(14);
    H1.insert(11);
    H1.display();
    H1.Delete();
    H1.display();  // Calling the display function to print the heap elements
}
