#include<bits/stdc++.h>
using namespace std;

class Node {
    public:
    int data;
    Node *left, *right;
    Node(int value) {
        data = value;
        left = right = nullptr;
    }
};

void preOrder(Node* root) {
    if (root == nullptr) {
        return ;
    }
    cout << root->data << " ";
    preOrder(root->left);
    preOrder(root->right);
}

void inOrder(Node* root) {
    if (root == nullptr) {
        return ;
    }
    inOrder(root->left);
    cout << root->data << " ";
    inOrder(root->right);
}

void postOrder(Node* root) {
    if (root == nullptr) {
        return ;
    }
    postOrder(root->left);
    postOrder(root->right);
    cout << root->data << " ";
}

vector<vector<int>> levelOrder(Node *root) {
    queue<Node*> q;
    vector<vector<int>> ans;
    if (root == nullptr) return ans;
    q.push(root);
    Node* temp;
    while(!q.empty()) {
        int size = q.size();
        vector<int> level;
        for(int i = 0; i < size; i++) {
            temp = q.front();
            q.pop();
            level.push_back(temp->data);
            if (temp->left) q.push(temp->left);
            if (temp->right) q.push(temp->right);
        }
        ans.push_back(level);
    }
    return ans;
}

Node* BinaryTree() {
    int x;
    cin >> x;
    if (x == -1) {
        return nullptr;
    }
    Node* temp = new Node(x);
    // Left side creation
    cout << "Enter the left child of " << x << " : ";
    temp->left = BinaryTree();
    // Right side creation
    cout << "Enter the right child of " << x << " : ";
    temp->right = BinaryTree();

    return temp;
}

int main() {
    cout << "Enter the root Node: ";
    Node* root;
    root = BinaryTree();

    // PreOrder print
    cout << "Pre Order: ";
    preOrder(root);

    // InOrder print
    cout << "\nIn Order: ";
    inOrder(root);

    // PostOrder print
    cout << "\nPost Order: ";
    postOrder(root);
}
