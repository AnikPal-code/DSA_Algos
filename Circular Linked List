#include<bits/stdc++.h>
using namespace std;

class Node {
    public:
    int data;
    Node* next;
    Node(int d) {
        this->data = d;
        this->next = nullptr;
    }

    ~Node() {
        int value = this->data;
        if(this->next != nullptr) {
            delete next;
            this->next = nullptr;
        }
        cout << "Memory is free for node with data " << value << endl;
    }
};

void print(Node* tail)
    Node* temp = tail;

	if (tail == nullptr) { // when list is empty
		cout << "List is Empty" << endl;
		return ;
	}

    do {
        cout << temp->data << " ";
        temp = temp->next;
    } while (temp != tail);
    cout << endl;
}


void insertNode(Node* &tail, int element, int d) {

	//empty list
	if (tail == nullptr) {
		Node* newNode = new Node(d);
		tail = newNode;
		newNode->next = newNode;
	}
	else {
		//non-empty list
		Node* curr = tail;
		while(curr->data != element) {
			curr = curr->next;
		}
		// after element found -> curr is representing element wala value
		Node* temp = new Node(d);
		temp->next = curr->next;
		curr->next = temp;
	}
}

void deleteNode(Node* &tail, int value) {

	if (tail == nullptr) {
		cout << "List is empty" << endl;
		return ;
	}
	else {
		Node* prev = tail;
		Node* curr = prev->next;

		while(curr->data != value) {
			prev = curr;
			curr = curr->next;
		}
		prev->next = curr->next;
		if (curr == prev) { // Single node linked List
			tail = nullptr;
		}

		if (tail == curr) { // >= 2 node linked list
			tail = prev;
		}
		curr->next = nullptr;
		delete curr;
	}
}

int main() {
    Node* tail = nullptr;
	insertNode(tail, 5, 3);

	insertNode(tail, 3, 5);

	insertNode(tail, 5, 7);

	insertNode(tail, 7, 9);

	insertNode(tail, 5, 6);

	insertNode(tail, 9, 10);

	insertNode(tail, 3, 4);

	deleteNode(tail, 5); // delete in the middle

	deleteNode(tail, 3); // delete at the head

	deleteNode(tail, 10); // delete at the tail
	print(tail);
}
