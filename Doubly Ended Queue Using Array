#include <iostream>
using namespace std;

class Deque {
    int *arr;
    int front, rear;
    int size;

public:
    Deque(int n) {
        size = n;
        arr = new int[n];
        front = -1;
        rear = -1;
    }

    void pushFront(int x) {
        if (isFull()) {
            cout << "Queue is Full" << endl;
            return;
        } else if (isEmpty()) {
            front = rear = 0;
        } else if (front == 0) {
            front = size - 1;
        } else {
            front--;
        }
        arr[front] = x; // Add the element to the front
    }

    void pushRear(int x) {
        if (isFull()) {
            cout << "Queue is Full" << endl;
            return;
        } else if (isEmpty()) {
            front = rear = 0;
        } else if (rear == size - 1) {
            rear = 0;
        } else {
            rear++;
        }
        arr[rear] = x; // Add the element to the rear
    }

    int popFront() {
        if (isEmpty()) {
            return -1;
        }
        int ans = arr[front];
        arr[front] = -1;
        if (front == rear) {
            front = rear = -1;
        } else if (front == size - 1) {
            front = 0;
        } else {
            front++;
        }
        return ans;
    }

    int popRear() {
        if (isEmpty()) {
            return -1;
        }
        int ans = arr[rear];
        arr[rear] = -1;
        if (front == rear) {
            front = rear = -1;
        } else if (rear == 0) {
            rear = size - 1;
        } else {
            rear--;
        }
        return ans;
    }

    int getFront() {
        if (isEmpty()) {
            return -1;
        }
        return arr[front];
    }

    int getRear() {
        if (isEmpty()) {
            return -1;
        }
        return arr[rear];
    }

    bool isEmpty() {
        return front == -1;
    }

    bool isFull() {
        return (front == 0 && rear == size - 1) || (rear == (front - 1 + size) % size);
    }
};

int main() {
    Deque d(5);
    d.pushFront(12);
    d.pushRear(23);
    d.pushFront(34);
    d.pushFront(13);
    d.pushRear(76);
    cout << d.isFull() << endl;
    cout << d.isEmpty() << endl;
    cout << d.getRear() << endl;
    cout << d.getFront() << endl;
}
